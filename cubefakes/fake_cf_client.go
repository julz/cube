// Code generated by counterfeiter. DO NOT EDIT.
package cubefakes

import (
	"sync"

	"github.com/julz/cube"
)

type FakeCfClient struct {
	GetDropletByAppGuidStub        func(string) ([]byte, error)
	getDropletByAppGuidMutex       sync.RWMutex
	getDropletByAppGuidArgsForCall []struct {
		arg1 string
	}
	getDropletByAppGuidReturns struct {
		result1 []byte
		result2 error
	}
	getDropletByAppGuidReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCfClient) GetDropletByAppGuid(arg1 string) ([]byte, error) {
	fake.getDropletByAppGuidMutex.Lock()
	ret, specificReturn := fake.getDropletByAppGuidReturnsOnCall[len(fake.getDropletByAppGuidArgsForCall)]
	fake.getDropletByAppGuidArgsForCall = append(fake.getDropletByAppGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetDropletByAppGuid", []interface{}{arg1})
	fake.getDropletByAppGuidMutex.Unlock()
	if fake.GetDropletByAppGuidStub != nil {
		return fake.GetDropletByAppGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDropletByAppGuidReturns.result1, fake.getDropletByAppGuidReturns.result2
}

func (fake *FakeCfClient) GetDropletByAppGuidCallCount() int {
	fake.getDropletByAppGuidMutex.RLock()
	defer fake.getDropletByAppGuidMutex.RUnlock()
	return len(fake.getDropletByAppGuidArgsForCall)
}

func (fake *FakeCfClient) GetDropletByAppGuidArgsForCall(i int) string {
	fake.getDropletByAppGuidMutex.RLock()
	defer fake.getDropletByAppGuidMutex.RUnlock()
	return fake.getDropletByAppGuidArgsForCall[i].arg1
}

func (fake *FakeCfClient) GetDropletByAppGuidReturns(result1 []byte, result2 error) {
	fake.GetDropletByAppGuidStub = nil
	fake.getDropletByAppGuidReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCfClient) GetDropletByAppGuidReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.GetDropletByAppGuidStub = nil
	if fake.getDropletByAppGuidReturnsOnCall == nil {
		fake.getDropletByAppGuidReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getDropletByAppGuidReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCfClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDropletByAppGuidMutex.RLock()
	defer fake.getDropletByAppGuidMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCfClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cube.CfClient = new(FakeCfClient)
